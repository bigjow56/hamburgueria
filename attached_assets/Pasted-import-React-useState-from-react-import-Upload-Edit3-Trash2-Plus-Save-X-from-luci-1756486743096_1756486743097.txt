import React, { useState } from 'react';
import { Upload, Edit3, Trash2, Plus, Save, X } from 'lucide-react';

const PainelAdmin = () => {
  const [produtos, setProdutos] = useState([
    {
      id: 1,
      nome: "X-Burger Clássico",
      descricao: "Hambúrguer suculento com alface, tomate e maionese",
      preco: 18.90,
      imagem: "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?w=300&h=200&fit=crop",
      categoria: "hamburguers",
      disponivel: true
    },
    {
      id: 2,
      nome: "X-Bacon Especial",
      descricao: "Duplo bacon com queijo cheddar",
      preco: 24.90,
      imagem: "https://images.unsplash.com/photo-1594212699903-ec8a3eca50f5?w=300&h=200&fit=crop",
      categoria: "hamburguers",
      disponivel: true
    }
  ]);

  const [editando, setEditando] = useState(null);
  const [novaImagem, setNovaImagem] = useState('');

  const handleImageUpload = (produtoId, file) => {
    // Simula upload de imagem
    const reader = new FileReader();
    reader.onload = (e) => {
      setProdutos(produtos.map(p => 
        p.id === produtoId 
          ? { ...p, imagem: e.target.result }
          : p
      ));
    };
    reader.readAsDataURL(file);
  };

  const handleEdit = (produto) => {
    setEditando(produto.id);
  };

  const handleSave = (produtoId, novosDados) => {
    setProdutos(produtos.map(p => 
      p.id === produtoId 
        ? { ...p, ...novosDados }
        : p
    ));
    setEditando(null);
  };

  const handleToggleDisponibilidade = (produtoId) => {
    setProdutos(produtos.map(p => 
      p.id === produtoId 
        ? { ...p, disponivel: !p.disponivel }
        : p
    ));
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Painel Administrativo</h1>
        <p className="text-gray-600">Gerencie seus produtos sem mexer no código</p>
      </div>

      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="bg-orange-500 text-white p-4">
          <h2 className="text-xl font-semibold flex items-center">
            <Edit3 className="mr-2" size={20} />
            Gerenciar Produtos
          </h2>
        </div>

        <div className="p-6">
          <div className="grid gap-6">
            {produtos.map(produto => (
              <div key={produto.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-start space-x-4">
                  {/* Imagem do produto */}
                  <div className="relative group">
                    <img 
                      src={produto.imagem} 
                      alt={produto.nome}
                      className="w-24 h-24 object-cover rounded-lg"
                    />
                    <label className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 cursor-pointer rounded-lg flex items-center justify-center transition-opacity">
                      <Upload className="text-white" size={20} />
                      <input 
                        type="file" 
                        accept="image/*"
                        className="hidden"
                        onChange={(e) => handleImageUpload(produto.id, e.target.files[0])}
                      />
                    </label>
                  </div>

                  {/* Informações do produto */}
                  <div className="flex-1">
                    {editando === produto.id ? (
                      <EditarProduto 
                        produto={produto}
                        onSave={(dados) => handleSave(produto.id, dados)}
                        onCancel={() => setEditando(null)}
                      />
                    ) : (
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-lg font-semibold">{produto.nome}</h3>
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => handleToggleDisponibilidade(produto.id)}
                              className={`px-3 py-1 rounded-full text-sm font-medium ${
                                produto.disponivel 
                                  ? 'bg-green-100 text-green-800' 
                                  : 'bg-red-100 text-red-800'
                              }`}
                            >
                              {produto.disponivel ? 'Disponível' : 'Indisponível'}
                            </button>
                            <button
                              onClick={() => handleEdit(produto)}
                              className="p-2 text-blue-600 hover:bg-blue-50 rounded-full"
                            >
                              <Edit3 size={16} />
                            </button>
                          </div>
                        </div>
                        <p className="text-gray-600 mb-2">{produto.descricao}</p>
                        <div className="flex items-center justify-between">
                          <span className="text-xl font-bold text-green-600">
                            R$ {produto.preco.toFixed(2)}
                          </span>
                          <span className="text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded">
                            {produto.categoria}
                          </span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          <button className="mt-6 bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg flex items-center font-medium transition-colors">
            <Plus className="mr-2" size={20} />
            Adicionar Novo Produto
          </button>
        </div>
      </div>
    </div>
  );
};

const EditarProduto = ({ produto, onSave, onCancel }) => {
  const [dados, setDados] = useState({
    nome: produto.nome,
    descricao: produto.descricao,
    preco: produto.preco,
    categoria: produto.categoria
  });

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
          <input
            type="text"
            value={dados.nome}
            onChange={(e) => setDados({...dados, nome: e.target.value})}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Preço</label>
          <input
            type="number"
            step="0.01"
            value={dados.preco}
            onChange={(e) => setDados({...dados, preco: parseFloat(e.target.value)})}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Descrição</label>
        <textarea
          value={dados.descricao}
          onChange={(e) => setDados({...dados, descricao: e.target.value})}
          rows="2"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
        />
      </div>

      <div className="flex space-x-2">
        <button
          onClick={() => onSave(dados)}
          className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center font-medium transition-colors"
        >
          <Save className="mr-1" size={16} />
          Salvar
        </button>
        <button
          onClick={onCancel}
          className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center font-medium transition-colors"
        >
          <X className="mr-1" size={16} />
          Cancelar
        </button>
      </div>
    </div>
  );
};

export default PainelAdmin;