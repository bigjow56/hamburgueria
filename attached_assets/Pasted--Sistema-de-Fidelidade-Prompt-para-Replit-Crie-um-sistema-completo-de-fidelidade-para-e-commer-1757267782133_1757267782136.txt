# Sistema de Fidelidade - Prompt para Replit

Crie um sistema completo de fidelidade para e-commerce com as seguintes funcionalidades:

## Tecnologias Requeridas
- **Backend**: Node.js com Express
- **Banco de Dados**: SQLite (para facilidade no Replit)
- **Frontend**: HTML, CSS, JavaScript vanilla
- **Autenticação**: JWT simples

## Estrutura do Banco de Dados

### Tabela: users
```sql
- id (INTEGER PRIMARY KEY)
- email (TEXT UNIQUE)
- password (TEXT)
- name (TEXT)
- points_balance (INTEGER DEFAULT 0)
- tier (TEXT DEFAULT 'bronze') -- bronze, silver, gold
- created_at (DATETIME)
```

### Tabela: transactions
```sql
- id (INTEGER PRIMARY KEY)
- user_id (INTEGER)
- type (TEXT) -- 'purchase', 'reward_redemption', 'bonus'
- amount (DECIMAL) -- valor da compra
- points_earned (INTEGER)
- description (TEXT)
- created_at (DATETIME)
```

### Tabela: rewards
```sql
- id (INTEGER PRIMARY KEY)
- name (TEXT)
- description (TEXT)
- points_required (INTEGER)
- category (TEXT)
- stock (INTEGER)
- active (BOOLEAN DEFAULT 1)
- created_at (DATETIME)
```

### Tabela: redemptions
```sql
- id (INTEGER PRIMARY KEY)
- user_id (INTEGER)
- reward_id (INTEGER)
- points_used (INTEGER)
- status (TEXT DEFAULT 'pending') -- pending, approved, delivered
- created_at (DATETIME)
```

## Funcionalidades do Sistema

### Autenticação
- Registro de usuário
- Login/Logout
- Middleware de autenticação JWT

### Sistema de Pontos
- **Regra básica**: 1 ponto para cada R$ 1,00 gasto
- **Multiplicadores por tier**:
  - Bronze: 1x
  - Prata: 1.2x (a partir de 1000 pontos acumulados)
  - Ouro: 1.5x (a partir de 5000 pontos acumulados)
- **Pontos bônus**:
  - 100 pontos no cadastro
  - 50 pontos por indicação de amigo

### Dashboard do Cliente
- Saldo atual de pontos
- Tier atual e próximo nível
- Histórico de transações
- Catálogo de recompensas
- Sistema de resgate

### Painel Administrativo
- Gerenciar recompensas (CRUD)
- Ver relatórios de uso
- Aprovar resgates
- Configurar regras de pontuação

## Endpoints da API

### Autenticação
```
POST /api/auth/register
POST /api/auth/login
GET /api/auth/profile
```

### Pontos e Transações
```
GET /api/points/balance
POST /api/points/add (para simular compras)
GET /api/points/history
POST /api/points/redeem/:rewardId
```

### Recompensas
```
GET /api/rewards (listar disponíveis)
GET /api/rewards/:id
POST /api/admin/rewards (criar - admin only)
PUT /api/admin/rewards/:id (editar - admin only)
DELETE /api/admin/rewards/:id (deletar - admin only)
```

### Resgates
```
GET /api/redemptions (histórico do usuário)
GET /api/admin/redemptions (todos - admin only)
PUT /api/admin/redemptions/:id/status (aprovar/rejeitar)
```

## Interface do Usuário

### Páginas Principais
1. **Login/Registro** - Formulários simples
2. **Dashboard** - Visão geral dos pontos e tier
3. **Loja de Recompensas** - Grid de produtos disponíveis
4. **Histórico** - Lista de transações e resgates
5. **Admin Panel** - CRUD de recompensas e aprovações

### Design Requirements
- Layout responsivo
- Uso de cores para indicar tiers (bronze, prata, ouro)
- Progress bar para próximo tier
- Cards para recompensas
- Feedback visual para ações (toast notifications)

## Recompensas Exemplo para Popular o Sistema
```javascript
const sampleRewards = [
  { name: "Desconto 10%", description: "10% de desconto na próxima compra", points: 500, category: "desconto" },
  { name: "Frete Grátis", description: "Frete grátis na próxima compra", points: 300, category: "frete" },
  { name: "Produto Premium", description: "Produto exclusivo para membros", points: 2000, category: "produto" },
  { name: "Desconto 25%", description: "25% de desconto na próxima compra", points: 1200, category: "desconto" },
  { name: "Cashback R$50", description: "R$50 de volta na conta", points: 2500, category: "cashback" }
]
```

## Recursos Extras (Implementar se houver tempo)
- Sistema de convite/indicação
- Notificações por email
- Expiração de pontos
- Campanhas especiais com pontos duplos
- Gamificação com badges/conquistas

## Instruções de Implementação
1. Configure o projeto Node.js com as dependências necessárias
2. Crie o banco SQLite com as tabelas especificadas
3. Implemente as rotas da API primeiro
4. Crie as páginas HTML com JavaScript para consumir a API
5. Adicione validações e tratamento de erros
6. Teste todas as funcionalidades
7. Popular com dados de exemplo

## Critérios de Sucesso
- Usuário consegue se registrar e fazer login
- Sistema calcula pontos corretamente baseado em "compras"
- Usuário consegue resgatar recompensas
- Admin consegue gerenciar recompensas
- Interface é intuitiva e responsiva
- Dados persistem corretamente no banco

Implemente este sistema completo, garantindo que todas as funcionalidades estejam funcionais e bem integradas.