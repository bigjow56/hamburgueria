Olá! Preciso evoluir meu sistema de banner. Vamos criar uma nova tabela no banco de dados para gerenciar diferentes temas de banner.

Por favor, abra meu arquivo de schema do Drizzle (provavelmente em shared/schema.ts) e adicione o seguinte modelo de tabela bannerThemes. Este modelo foi projetado para suportar tanto banners customizáveis (com campos individuais) quanto banners com código HTML completo.

TypeScript

export const bannerThemes = pgTable("banner_themes", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name", { length: 100 }).notNull(),
  isCustomizable: boolean("is_customizable").default(false),
  htmlContent: text("html_content"),
  title: varchar("title", { length: 255 }),
  description: text("description"),
  price: decimal("price", { precision: 10, scale: 2 }),
  imageUrl: text("image_url"),
  gradientColor1: varchar("gradient_color_1", { length: 7 }),
  gradientColor2: varchar("gradient_color_2", { length: 7 }),
  gradientColor3: varchar("gradient_color_3", { length: 7 }),
  gradientColor4: varchar("gradient_color_4", { length: 7 }),
  useBackgroundImage: boolean("use_background_image").default(false),
  isActive: boolean("is_active").default(false),
  createdAt: timestamp("created_at").defaultNow(),
});
Apenas adicione esta definição ao arquivo. Não modifique mais nada por enquanto.

O que fazer depois:
Quando a IA confirmar que adicionou o código, vá para a aba "Shell" do Replit e rode o comando de migração para criar a tabela no seu banco Neon:
npx drizzle-kit push:pg

Prompt 2: Criando a Lógica da API
Agora que a tabela existe, este prompt criará as rotas da API para que o painel de administração possa gerenciar os banners e o site possa buscar o banner ativo.

Copie e cole no Replit AI:

Ótimo, a estrutura do banco de dados está pronta. Agora, preciso criar os endpoints da API para gerenciar os bannerThemes.

Por favor, modifique meus arquivos de backend (provavelmente server/routes.ts e server/storage.ts) para implementar as seguintes rotas:

GET /api/active-banner: Uma rota pública que busca no banco o único banner que está com isActive: true e retorna seus dados.

GET /api/banners: Uma rota para o painel de administração que lista todos os banners cadastrados.

POST /api/banners: Uma rota para o painel de administração que permite criar um novo tema de banner (seja customizável ou com HTML).

PUT /api/banners/:id: Uma rota para atualizar os dados de um banner existente.

PUT /api/banners/:id/activate: Uma rota especial que ativa o banner selecionado. A lógica deve primeiro desativar todos os outros banners (isActive = false) e depois ativar apenas o banner com o :id fornecido (isActive = true).

Implemente a lógica de acesso ao banco de dados no arquivo de storage e as rotas no arquivo de rotas, seguindo o padrão já existente no meu projeto.

O que fazer depois:
Após a IA implementar a API, reinicie seu servidor e você pode usar uma ferramenta como o Postman ou o próprio navegador para testar as novas rotas, como [sua-url-do-replit]/api/banners.

Prompt 3: Adicionando o Banner da Black Friday
Este último prompt irá criar um "script de seed", que é um pequeno programa que você roda uma vez para popular seu banco de dados. Ele irá cadastrar o seu banner da Black Friday na nova tabela.

Copie e cole no Replit AI:

Perfeito. Para finalizar, quero adicionar meu primeiro banner temático. Crie um novo arquivo de script em scripts/seed-banners.ts.

Este script deve se conectar ao banco de dados usando o Drizzle e inserir um novo registro na tabela banner_themes. O registro deve ter os seguintes dados:

name: "Black Friday"

isCustomizable: false

isActive: false

htmlContent: O código HTML completo do banner da Black Friday que eu já forneci.