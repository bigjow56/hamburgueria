üîç PROBLEMA: Rec√°lculo de pre√ßo retornando R$ 0.00
Situa√ß√£o Atual:
‚úÖ Ingredientes salvos corretamente - Console mostra customPrice com valores ("1.20", "1.50", "5.00")
‚ùå Fun√ß√£o recalculate-price sempre retorna zero
INVESTIGA√á√ÉO E CORRE√á√ÉO NECESS√ÅRIA:
1Ô∏è‚É£ LOCALIZAR E ANALISAR A ROTA
Encontre a rota: POST /api/products/:id/recalculate-price
2Ô∏è‚É£ ADICIONAR LOGS DE DEBUG DETALHADOS
javascriptconsole.log('=== IN√çCIO REC√ÅLCULO PRE√áO ===');
console.log('Product ID:', req.params.id);
console.log('Ingredientes raw:', ingredients);
console.log('Quantidade de ingredientes:', ingredients?.length || 0);

let totalPrice = 0;
ingredients?.forEach((ingredient, index) => {
  console.log(`\n--- Ingrediente ${index + 1} ---`);
  console.log('Nome:', ingredient.name || ingredient.ingredientName);
  console.log('customPrice (original):', ingredient.customPrice);
  console.log('customPrice (tipo):', typeof ingredient.customPrice);
  console.log('quantity:', ingredient.quantity);
  
  const price = parseFloat(ingredient.customPrice || 0);
  const qty = parseInt(ingredient.quantity || 1);
  const subtotal = price * qty;
  
  console.log('Price convertido:', price);
  console.log('Quantity convertida:', qty);
  console.log('Subtotal:', subtotal);
  
  totalPrice += subtotal;
});

console.log('\n=== RESULTADO FINAL ===');
console.log('Total calculado:', totalPrice);
console.log('=== FIM REC√ÅLCULO ===\n');
3Ô∏è‚É£ PROBLEMAS COMUNS A VERIFICAR
A) Busca no banco incorreta:

Verificar se a query est√° retornando customPrice
Conferir se o JOIN est√° correto

B) Convers√£o de tipos:

customPrice pode estar como string
Usar parseFloat() sempre

C) Campos incorretos:

Pode estar usando price ao inv√©s de customPrice
Verificar nomes dos campos na query

4Ô∏è‚É£ TESTE ESTE C√ìDIGO CORRIGIDO
javascriptapp.post('/api/products/:id/recalculate-price', async (req, res) => {
  try {
    const productId = req.params.id;
    
    // Buscar ingredientes
    const ingredients = await storage.getProductIngredients(productId);
    
    // DEBUG COMPLETO
    console.log('=== REC√ÅLCULO PRE√áO DEBUG ===');
    console.log('Ingredientes encontrados:', ingredients?.length || 0);
    
    let totalPrice = 0;
    
    if (ingredients && ingredients.length > 0) {
      ingredients.forEach((ingredient, index) => {
        // Tentar diferentes campos poss√≠veis
        const priceValue = ingredient.customPrice || ingredient.custom_price || ingredient.price || 0;
        const quantityValue = ingredient.quantity || 1;
        
        console.log(`Ingrediente ${index + 1}:`, {
          name: ingredient.name,
          priceOriginal: priceValue,
          priceConverted: parseFloat(priceValue),
          quantity: quantityValue,
          subtotal: parseFloat(priceValue) * quantityValue
        });
        
        const price = parseFloat(priceValue);
        const qty = parseInt(quantityValue);
        
        if (!isNaN(price) && !isNaN(qty)) {
          totalPrice += price * qty;
        }
      });
    }
    
    console.log('TOTAL FINAL:', totalPrice);
    
    res.json({ 
      totalPrice: totalPrice,
      formattedPrice: `R$ ${totalPrice.toFixed(2)}`,
      ingredientsCount: ingredients?.length || 0
    });
    
  } catch (error) {
    console.error('Erro no rec√°lculo:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});
5Ô∏è‚É£ VERIFICAR TAMB√âM A QUERY SQL
Mostrar a query que busca ingredientes:
sql-- Deve incluir o campo customPrice
SELECT pi.*, i.name, pi.custom_price as customPrice 
FROM product_ingredients pi 
JOIN ingredients i ON pi.ingredient_id = i.id 
WHERE pi.product_id = ?
üéØ OBJETIVO:

Executar os logs detalhados
Ver exatamente o que est√° chegando na fun√ß√£o
Identificar se √© problema de query ou de c√°lculo
Corrigir a l√≥gica baseado nos logs

Ap√≥s aplicar, teste novamente e me mostre os logs do console!